module mojo_top (
    input  clk,             // 50MHz clock
    input  rst_n,           // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input  cclk,            // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input  spi_ss,          // AVR SPI Slave Select
    input  spi_mosi,        // AVR SPI MOSI
    input  spi_sck,         // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input  avr_tx,          // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input  avr_rx_busy,     // AVR RX buffer full
    output panel_stb,
    output panel_clk,
    inout  panel_dio,
    output ram_ce,
    output ram_clk,
    inout  ram_sio[4]
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    clock_generator clk_gen;
  }
  
  .clk(clk_gen.clk_3) {
    reset_conditioner reset_cond;
    
    .rst(rst){
      // the avr_interface module is used to talk to the AVR for access to the USB port and analog pins
      avr_interface avr(#CLK_FREQ(33333000));
      slow_clock slow_clk;
      tm1638_octal display(.dio(panel_dio), .bright(3h0));
    }
  }
  
  .clk(slow_clk.out), .rst(rst) {
    timing_generator time_gen( .fast(display.button[0]), .bus_strobe(~display.button[6]), .not_last_xfer(~display.button[7]) );
    ext_mem ram( .ram_sio(ram_sio) );
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    // connect inputs of avr
    avr.cclk = cclk;
    avr.spi_ss = spi_ss;
    avr.spi_mosi = spi_mosi;
    avr.spi_sck = spi_sck;
    avr.rx = avr_tx;
    avr.channel = hf;           // ADC is unused so disable
    avr.tx_block = avr_rx_busy; // block T
    
    // connect outputs of avr
    spi_miso = avr.spi_miso;
    spi_channel = avr.spi_channel;
    avr_rx = avr.tx;
    
    // unused serial port
    avr.tx_data = 8hxx;  // don't care
    avr.new_tx_data = 0; // no data
    
    led = time_gen.debug;
    
    panel_stb = display.ss;
    panel_clk = display.sck;
    display.display = {12h000, 12h000};
    display.dp = 8h00;
    display.led = 8h00;
    
    ram_ce = ram.ram_ce;
    ram_clk = ram.ram_clk;
  }
}